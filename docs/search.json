[
  {
    "objectID": "using-docker-compose.html",
    "href": "using-docker-compose.html",
    "title": "Using docker-compose",
    "section": "",
    "text": "Docker Compose is a tool that lets you define and run multi-container applications. With one command, you can create and launch all the services defined in the docker-compose.yml file.\nIf Docker Desktop is installed on your machines, Docker Compose should already be included. If not, they need to install it separately. You can check if it’s installed by running:",
    "crumbs": [
      "Fundamentals",
      "Using Docker-Compose"
    ]
  },
  {
    "objectID": "using-docker-compose.html#create-a-docker-compose.yml-file",
    "href": "using-docker-compose.html#create-a-docker-compose.yml-file",
    "title": "Using docker-compose",
    "section": "Create a docker-compose.yml File",
    "text": "Create a docker-compose.yml File\n\nNavigate to the root of your project where Dockerfile is also located, create a docker-compose.yml file. Below is a simple docker-compose.yml for a static site served by Nginx.\n\n   version: '3.8'\n   services:\n   nginx:\n      image: nginx:alpine\n      ports:\n         - \"8089:80\"\n      volumes:\n         - ./my-folder:/usr/share/nginx/html",
    "crumbs": [
      "Fundamentals",
      "Using Docker-Compose"
    ]
  },
  {
    "objectID": "using-docker-compose.html#build-and-run-containers",
    "href": "using-docker-compose.html#build-and-run-containers",
    "title": "Using docker-compose",
    "section": "Build and Run Containers",
    "text": "Build and Run Containers\n\nRun the command below in your terminal from the root of your project\n\n   docker-compose up -d\n\n\nThe -d flag runs containers in the background.\nOpen a web browser and navigate to http://localhost:/ to verify that your service is running correctly.\nAdjust  based on your docker-compose.yml settings. In my example I use port 8089\nUse docker-compose ps to check the status of running services.",
    "crumbs": [
      "Fundamentals",
      "Using Docker-Compose"
    ]
  },
  {
    "objectID": "installing-docker-pc.html",
    "href": "installing-docker-pc.html",
    "title": "Installing Docker on Your PC",
    "section": "",
    "text": "Go to Docker Website\nClick on “Get Started”",
    "crumbs": [
      "Fundamentals",
      "Installing docker",
      "Install-PC"
    ]
  },
  {
    "objectID": "installing-docker-pc.html#download-docker-desktop-for-pc",
    "href": "installing-docker-pc.html#download-docker-desktop-for-pc",
    "title": "Installing Docker on Your PC",
    "section": "",
    "text": "Go to Docker Website\nClick on “Get Started”",
    "crumbs": [
      "Fundamentals",
      "Installing docker",
      "Install-PC"
    ]
  },
  {
    "objectID": "installing-docker-pc.html#install-docker-desktop",
    "href": "installing-docker-pc.html#install-docker-desktop",
    "title": "Installing Docker on Your PC",
    "section": "2. Install Docker Desktop:",
    "text": "2. Install Docker Desktop:\n(needs instructions and pictures)",
    "crumbs": [
      "Fundamentals",
      "Installing docker",
      "Install-PC"
    ]
  },
  {
    "objectID": "installing-docker-pc.html#verify-the-installation",
    "href": "installing-docker-pc.html#verify-the-installation",
    "title": "Installing Docker on Your PC",
    "section": "3. Verify the Installation:",
    "text": "3. Verify the Installation:\n\nOpen a terminal and type the following command to check if Docker is installed correctly:\n\ndocker --version",
    "crumbs": [
      "Fundamentals",
      "Installing docker",
      "Install-PC"
    ]
  },
  {
    "objectID": "installing-docker-pc.html#run-a-test-container",
    "href": "installing-docker-pc.html#run-a-test-container",
    "title": "Installing Docker on Your PC",
    "section": "4. Run a Test Container:",
    "text": "4. Run a Test Container:\n\nTo ensure Docker is functioning properly, run a simple container like “Hello World”:\n\ndocker run hello-world\n\nThis command will download a test image and run it, outputting a message that confirms Docker is installed and working.\n\n\n\nIf you run a Docker command like docker run hello-world for the first time and see a message saying, “Unable to find the image locally”, don’t worry! This just means the image isn’t on your machine yet.\nDocker will automatically start downloading the image from Docker Hub. Once the image is downloaded, it will run.",
    "crumbs": [
      "Fundamentals",
      "Installing docker",
      "Install-PC"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CMSC 408 - Docker Tutorial",
    "section": "",
    "text": "Welcome to the docker tutorial! This tutorial will discuss:\nAt completion of this tutorial you should have a website and database running on your machine."
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "CMSC 408 - Docker Tutorial",
    "section": "Getting started",
    "text": "Getting started\n\nFundamentals, providing just enough docker vocabulary to be dangerous,\nInstalling docker and docker compose on your computer,\nSelecting a base image for your application(s),\nUsing docker-compose to develop your application."
  },
  {
    "objectID": "index.html#examples",
    "href": "index.html#examples",
    "title": "CMSC 408 - Docker Tutorial",
    "section": "Examples",
    "text": "Examples\nThe web site contains a bunch of docker examples, as listed below. These links take you directly to the GITHUB repo and the respective README files.\n\nnginx-static-example - creates a simple, static web server with the html file stored inside the container.\nnginx-static-volume - creates a simple web server container with the html files stored on your local disk.\napache-php-remote-mysql - creates a local apache web server serving html/php pages from your local disk, connected to cmsc508.com using your username and password.\napache-php-local-mysql - creates a local apache setb server serving html/php pages from your local disk, connected to a locally running mysql DB and locally running phpmyadmin.\nproduction-example-1 - creates a localling running nginx load balancer and reverse proxy, apache-php server, mysql database and phpmyadmin all talking together."
  },
  {
    "objectID": "index.html#other-info",
    "href": "index.html#other-info",
    "title": "CMSC 408 - Docker Tutorial",
    "section": "Other info",
    "text": "Other info\n\nFundamentals, providing just enough docker vocabulary to be dangerous,\nAbout - talks about the motivation for this site and introduces the principle author.\nGITHUB repo - follow this link to get to the GITHUB repo."
  },
  {
    "objectID": "background.html",
    "href": "background.html",
    "title": "Background",
    "section": "",
    "text": "This tutorial introduces the student to containers, docker and docker compose."
  },
  {
    "objectID": "background.html#containers",
    "href": "background.html#containers",
    "title": "Background",
    "section": "Containers",
    "text": "Containers\n\nContainers are lightweight, portable units of software that bundle an application and its dependencies (libraries, system tools, etc.) into a single package. This ensures that the application runs consistently across different environments (development, testing, production) without worrying about discrepancies in system configurations.\nUnlike virtual machines, containers share the host machine’s operating system, making them more resource-efficient while still isolating the application from the rest of the system."
  },
  {
    "objectID": "background.html#docker",
    "href": "background.html#docker",
    "title": "Background",
    "section": "Docker",
    "text": "Docker\n\nDocker is an open-source platform that automates the deployment of applications inside containers. It simplifies the process of creating, managing, and running containers.\nDocker uses Docker images as blueprints for containers. Images are read-only templates that define the application’s environment, including the OS, libraries, and application code.\nDocker containers are instances of Docker images. When you run an image, it creates a container that executes the application in the environment defined by the image.\nDocker makes it easy to replicate and share applications, as well as to ensure consistency across different systems."
  },
  {
    "objectID": "background.html#docker-compose",
    "href": "background.html#docker-compose",
    "title": "Background",
    "section": "Docker Compose",
    "text": "Docker Compose\n\nDocker Compose is a tool used for defining and running multi-container Docker applications. It allows you to specify multiple services (like web servers, databases, etc.) in a single configuration file (docker-compose.yml).\nWith Docker Compose, you can start all services with a single command, manage them collectively, and ensure they interact as needed. This is particularly useful for applications that involve several components (e.g., a web server, a database, and a cache).\n\nExample: For a typical web application, you might use Docker Compose to: - Run a web server (NGINX or Apache) in one container. - Run a database (MySQL or PostgreSQL) in another container. - Link the two containers so they can communicate.\nThis setup allows developers to work in isolated, reproducible environments and simplifies managing complex applications."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About page",
    "section": "",
    "text": "This tutorial was creating during the Fall 2024 semester by Huyen Huynh.\nHuyen is a MS graduate student at VCU and a graduate of VCU Computer Science in Spring 2024."
  },
  {
    "objectID": "about.html#about-the-author",
    "href": "about.html#about-the-author",
    "title": "About page",
    "section": "",
    "text": "This tutorial was creating during the Fall 2024 semester by Huyen Huynh.\nHuyen is a MS graduate student at VCU and a graduate of VCU Computer Science in Spring 2024."
  },
  {
    "objectID": "about.html#about-the-site",
    "href": "about.html#about-the-site",
    "title": "About page",
    "section": "About the site",
    "text": "About the site\nThe site is built using quarto.\nThe site is delivered using github-pages\nQuarto and gh-pages work together very nicely!\nSource for this site is maintained on Github."
  },
  {
    "objectID": "fundamentals.html",
    "href": "fundamentals.html",
    "title": "Docker fundamentals",
    "section": "",
    "text": "Docker is a platform that enables developers to package applications and their dependencies into standardized containers, ensuring consistency across different environments. It uses lightweight, isolated containers that share the host system’s kernel, making them more efficient than traditional virtual machines. Docker simplifies application deployment, scaling, and management, especially in cloud and microservices architectures."
  },
  {
    "objectID": "fundamentals.html#motivation",
    "href": "fundamentals.html#motivation",
    "title": "Docker fundamentals",
    "section": "Motivation",
    "text": "Motivation\nDocker was created to solve the issue of inconsistencies between development, testing, and production environments by packaging applications and their dependencies into containers. It aimed to streamline software deployment and enhance scalability, making it easier for developers and operations teams to collaborate and manage applications across different systems.\nDocker was created in 2013 by Solomon Hykes, during his time at the company dotCloud, a platform-as-a-service (PaaS) provider. Initially developed as an internal project, it was later open-sourced and quickly gained popularity due to its innovative approach to containerization. Docker Inc. was subsequently founded to further develop and support the Docker platform as it transformed software development and operations."
  },
  {
    "objectID": "fundamentals.html#core-concepts",
    "href": "fundamentals.html#core-concepts",
    "title": "Docker fundamentals",
    "section": "Core concepts",
    "text": "Core concepts\nThe following tables summarize core or fundamental docker concepts. Later sections of this document provide more details.\n\nGetting Started\n\n\n\n\n\n\n\nConcept\nPurpose\n\n\n\n\nContainers\nRunning instance of an image; core unit of Docker.\n\n\nImages\nBlueprint for containers, containing application and dependencies.\n\n\nDockerfile\nInstructions to build images for reproducible environments.\n\n\nDocker CLI\nMain interface for managing Docker resources.\n\n\n\n\n\nDocker environment\n\n\n\n\n\n\n\nConcept\nPurpose\n\n\n\n\nVolumes\nPersistent storage for containers.\n\n\nNetworks\nManages communication between containers.\n\n\nRegistries\nStores and distributes Docker images (e.g., Docker Hub).\n\n\nServices\nDefines scalable and distributed container applications.\n\n\n\n\n\nDocker control\n\n\n\n\n\n\n\nConcept\nPurpose\n\n\n\n\nDocker Compose\nManages multi-container applications with services, networks, and volumes.\n\n\nDocker Swarm / Kubernetes\nOrchestrates large-scale container deployments in production.\n\n\nDocker Daemon\nBackground process managing Docker resources."
  },
  {
    "objectID": "fundamentals.html#getting-started-1",
    "href": "fundamentals.html#getting-started-1",
    "title": "Docker fundamentals",
    "section": "Getting started",
    "text": "Getting started\nTo get started with Docker, you first build or pull a Docker image, which is a template containing your application and its dependencies, and then create containers from that image to run the application. Using a Dockerfile, you can automate the image-building process, and with the Docker CLI, you can manage images, containers, networks, and other Docker resources through simple commands.\n\nContainers\n\nDefinition: A container is a running instance of a Docker image. It provides an isolated environment to run applications, with their own filesystem, networking, and processes, but shares the host system’s kernel.\nPurpose: Containers are the core concept of Docker, representing live applications running in isolated environments.\nKey Points:\n\nCan be started, stopped, and removed.\nProvides a consistent environment across development, testing, and production.\nLightweight compared to virtual machines.\n\n\n\n\nImages\n\nDefinition: A Docker image is a read-only template that contains the application, along with its dependencies and environment configurations.\nPurpose: Images are the blueprint for creating containers, defining everything needed to run an application.\nKey Points:\n\nCan be built from a Dockerfile.\nImmutable and reusable.\nCan be shared via Docker Hub or private registries.\n\n\n\n\nDockerfile\n\nDefinition: A text file containing the instructions to build a Docker image.\nPurpose: Automates the creation of images by defining the application, its dependencies, and how to configure it.\nKey Points:\n\nProvides reproducibility for building images.\nEach instruction adds a new layer to the image.\nTypically starts with a base image and adds application-specific instructions.\n\n\n\n\nDocker CLI\n\nDefinition: The command-line interface used to interact with Docker.\nPurpose: Allows users to issue commands to the Docker daemon to manage containers, images, networks, volumes, etc.\nKey Points:\n\nMain interface for interacting with Docker.\nAllows building images, running containers, and managing Docker resources."
  },
  {
    "objectID": "fundamentals.html#docker-environment-1",
    "href": "fundamentals.html#docker-environment-1",
    "title": "Docker fundamentals",
    "section": "Docker Environment",
    "text": "Docker Environment\nDocker environment concepts such as volumes and networks ensure that containers have persistent storage and can communicate with each other or external systems. Registries store and distribute Docker images, while services allow for scalable and distributed container deployments, especially in orchestrated environments like Docker Swarm or Kubernetes.\n\nVolumes\n\nDefinition: A way to persist data generated or used by containers.\nPurpose: Provides persistent storage that is independent of the container lifecycle.\nKey Points:\n\nUseful for databases and applications needing persistent state.\nCan be shared across multiple containers.\nData is stored outside the container’s filesystem.\n\n\n\n\nNetworks\n\nDefinition: Enables communication between Docker containers or between containers and the outside world.\nPurpose: Provides the ability to isolate, expose, and manage how containers communicate.\nKey Points:\n\nContainers on the same network can communicate using their names.\nSeveral types of networks like bridge, host, and overlay.\n\n\n\n\nRegistries\n\nDefinition: A storage and distribution system for Docker images, such as Docker Hub.\nPurpose: Enables sharing and downloading Docker images, either publicly or privately.\nKey Points:\n\nDocker Hub is the default public registry.\nPrivate registries can be used for internal projects.\nImages are pushed and pulled from registries.\n\n\n\n\nServices\n\nDefinition: A higher-level abstraction that defines how containers should run in a Docker Swarm or Kubernetes cluster.\nPurpose: Used to scale containers across multiple hosts and manage distributed containerized applications.\nKey Points:\n\nDefines replicas (multiple instances) of containers.\nUsed in orchestration environments like Docker Swarm and Kubernetes."
  },
  {
    "objectID": "fundamentals.html#docker-control-1",
    "href": "fundamentals.html#docker-control-1",
    "title": "Docker fundamentals",
    "section": "Docker control",
    "text": "Docker control\nDocker control programs like the Docker daemon manage the core operations of containers, images, and networking, acting as the engine that powers Docker. Tools like Docker Compose and Kubernetes provide higher-level orchestration, with Docker Compose managing multi-container applications and Kubernetes handling large-scale container deployment, scaling, and management across clusters.\n\nDocker Compose\n\nDefinition: A tool to define and manage multi-container Docker applications via a docker-compose.yml file.\nPurpose: Simplifies running multi-container applications by managing containers, networks, and volumes together.\nKey Points:\n\nDefines services and how they interact.\nEnables easy scaling and management of containerized apps.\nGreat for development and testing environments.\n\n\n\n\nDocker Swarm and Kubernetes (Orchestration)\n\nDocker Swarm: Docker’s native clustering and orchestration tool (less commonly used now).\nKubernetes: An open-source orchestration platform that automates deploying, scaling, and managing containerized applications.\nPurpose: Orchestration is essential for managing large-scale containerized applications in production environments.\nKey Points:\n\nAutomates scaling, load balancing, and managing containers.\nKubernetes is more commonly used in production than Docker Swarm.\n\n\n\n\nDocker Daemon\n\nDefinition: The background process that runs on the host and manages Docker containers, images, volumes, and networks.\nPurpose: Executes Docker commands from the Docker CLI and manages Docker resources.\nKey Points:\n\nThe engine that powers Docker.\nHandles container lifecycle and image building."
  },
  {
    "objectID": "installing-docker-mac.html",
    "href": "installing-docker-mac.html",
    "title": "Installing Docker on Your Mac",
    "section": "",
    "text": "Go to Docker Website\nClick on “Get Started”",
    "crumbs": [
      "Fundamentals",
      "Installing docker",
      "Install-Mac"
    ]
  },
  {
    "objectID": "installing-docker-mac.html#download-docker-desktop-for-mac",
    "href": "installing-docker-mac.html#download-docker-desktop-for-mac",
    "title": "Installing Docker on Your Mac",
    "section": "",
    "text": "Go to Docker Website\nClick on “Get Started”",
    "crumbs": [
      "Fundamentals",
      "Installing docker",
      "Install-Mac"
    ]
  },
  {
    "objectID": "installing-docker-mac.html#install-docker-desktop",
    "href": "installing-docker-mac.html#install-docker-desktop",
    "title": "Installing Docker on Your Mac",
    "section": "2. Install Docker Desktop:",
    "text": "2. Install Docker Desktop:\n - Open the downloaded .dmg file. - Drag the Docker icon to the Applications folder to install it.  - Open Docker from your Applications folder. - You may be prompted to enter your email, so follow the on-screen instructions.",
    "crumbs": [
      "Fundamentals",
      "Installing docker",
      "Install-Mac"
    ]
  },
  {
    "objectID": "installing-docker-mac.html#verify-the-installation",
    "href": "installing-docker-mac.html#verify-the-installation",
    "title": "Installing Docker on Your Mac",
    "section": "3. Verify the Installation:",
    "text": "3. Verify the Installation:\n\nOpen a terminal and type the following command to check if Docker is installed correctly:\ndocker --version",
    "crumbs": [
      "Fundamentals",
      "Installing docker",
      "Install-Mac"
    ]
  },
  {
    "objectID": "installing-docker-mac.html#run-a-test-container",
    "href": "installing-docker-mac.html#run-a-test-container",
    "title": "Installing Docker on Your Mac",
    "section": "4. Run a Test Container:",
    "text": "4. Run a Test Container:\n\nTo ensure Docker is functioning properly, run a simple container like “Hello World”:\ndocker run hello-world\nThis command will download a test image and run it, outputting a message that confirms Docker is installed and working. \nIf you run a Docker command like docker run hello-world for the first time and see a message saying, “Unable to find the image locally”, don’t worry! This just means the image isn’t on your machine yet.\nDocker will automatically start downloading the image from Docker Hub. Once the image is downloaded, it will run.",
    "crumbs": [
      "Fundamentals",
      "Installing docker",
      "Install-Mac"
    ]
  },
  {
    "objectID": "selecting-base-image.html",
    "href": "selecting-base-image.html",
    "title": "Selecting a base image for your web site",
    "section": "",
    "text": "When building a website using Docker, selecting the right base image is crucial. The base image provides the underlying operating system and the necessary software components.\nThe choice of a base image depends on the needs of your project. Here are some common scenarios and the recommended base images:",
    "crumbs": [
      "Fundamentals",
      "Selecting-base"
    ]
  },
  {
    "objectID": "selecting-base-image.html#static-websites",
    "href": "selecting-base-image.html#static-websites",
    "title": "Selecting a base image for your web site",
    "section": "1. Static Websites",
    "text": "1. Static Websites\n\nNginx: Ideal for serving static content such as HTML, CSS, and JavaScript.\nUse nginx:alpine for a lightweight, secure, and efficient static web server.\n\n\nCreate a Dockerfile\n\nCreate a txt file and paste the the lines below\n   FROM nginx:latest\n   COPY ./my-folder/index.html /usr/share/nginx/html/\n   COPY ./my-folder/styles.css /usr/share/nginx/html/\n   COPY ./my-folder/script.js /usr/share/nginx/html/\nSave the file as Dockerfile in the root of your project directory where your website files are located (e.g., HTML, CSS, JavaScript files).\n\n\n\nBuild the Docker Image Using Command Line\n\nOpen a terminal or command prompt.\nNavigate to the directory where your Dockerfile is located.\nRun the following command to build the Docker image:\n   docker build -t my-website .\nYou can replace my-website with any name you prefer for your Docker image\n\n\n\nRun the Docker Container\n\nOnce the image is built, run it by typing:\n   docker run -d -p 8080:80 my-website\n\n\n\nVerify the container is running\n\nRun the following command to ensure your container is up and running:\n   docker ps\n\n\n\nAccess the Website\nNow, go to your browser and visit http://localhost:8080 to see your website.\n\n\n\nUse Docker Volume Mounting\n\nYou can mount your local project directory as a volume in the container. By mounting your local files as a volume, any changes you make to your index.html, style.css, or script.js will be immediately reflected inside the running container, allowing you to see updates without rebuilding the image or restarting the container.\nRun the command below to find ContainerID\n    docker ps\nStop the current container (if it’s using)\n    docker stop &lt;container-id&gt;\nRun the container with a volume mount\n   docker run -d -p 8080:80 -v $(pwd)/my-folder:/usr/share/nginx/html my-website",
    "crumbs": [
      "Fundamentals",
      "Selecting-base"
    ]
  }
]